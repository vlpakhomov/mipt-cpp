[1mdiff --git a/string/string.cpp b/string/string.cpp[m
[1mindex a8e4bda..6b09f26 100644[m
[1m--- a/string/string.cpp[m
[1m+++ b/string/string.cpp[m
[36m@@ -1,274 +1,273 @@[m
[32m+[m[32m// Copyright 2023 Vladislav Pakhomov[m
[32m+[m
 #include "string.hpp"[m
 [m
[32m+[m[32m#include <algorithm>[m
[32m+[m[32m#include <cstring>[m
[32m+[m[32m#include <iostream>[m
[32m+[m[32m#include <istream>[m
[32m+[m[32m#include <limits>[m
[32m+[m[32m#include <locale>[m
[32m+[m[32m#include <utility>[m
[32m+[m[32m#include <vector>[m
 [m
[31m-String::String(size_t n, char c): sz(n), cap(sz), data(new char[cap]) {[m
[31m-    std::fill(data, data + sz, c);[m
[32m+[m[32mString::String(size_t num, char chr)[m
[32m+[m[32m    : sz_(num), cap_(sz_), data_(new char[cap_]) {[m
[32m+[m[32m  std::fill(data_, data_ + sz_, chr);[m
 }[m
 [m
[31m-String::String(char const* s): sz(strlen(s)), cap(sz), data(new char[cap]) {[m
[31m-    std::copy(s, s + sz, data);[m
[32m+[m[32mString::String(char const* str)[m
[32m+[m[32m    : sz_(strlen(str)), cap_(sz_), data_(new char[cap_]) {[m
[32m+[m[32m  std::copy(str, str + sz_, data_);[m
 }[m
 [m
[31m-String::String(String const& s): sz(s.sz), cap(s.cap), data(new char[cap]) {[m
[31m-	std::copy(s.data, s.data + s.sz, data);[m
[31m-}[m
[31m-String& String::operator=(String const& s) {[m
[31m-	String copy = s;[m
[31m-	Swap(copy);[m
[31m-    return *this;[m
[32m+[m[32mString::String(String const& str)[m
[32m+[m[32m    : sz_(str.sz_), cap_(str.cap_), data_(new char[cap_]) {[m
[32m+[m[32m  std::copy(str.data_, str.data_ + str.sz_, data_);[m
 }[m
[31m-String::~String() {[m
[31m-    delete[] data;[m
[32m+[m[32mString& String::operator=(String const& str) {[m
[32m+[m[32m  String copy = str;[m
[32m+[m[32m  Swap(copy);[m
[32m+[m[32m  return *this;[m
 }[m
[32m+[m[32mString::~String() { delete[] data_; }[m
 [m
[31m-void String::Clear() {[m
[31m-    sz = 0;[m
[32m+[m[32mvoid String::Clear() { sz_ = 0; }[m
[32m+[m[32mvoid String::PushBack(char chr) {[m
[32m+[m[32m  if (sz_ == cap_) {[m
[32m+[m[32m    Reserve(sz_ * 2);[m
[32m+[m[32m  }[m
[32m+[m[32m  data_[sz_] = chr;[m
[32m+[m[32m  ++sz_;[m
 }[m
[31m-void String::PushBack(char c) {[m
[31m-    if (sz == cap) {[m
[31m-        Reserve(sz * 2);[m
[31m-    }[m
[31m-    data[sz] = c;[m
[31m-    ++sz;[m
[31m-} [m
 [m
 void String::PopBack() {[m
[31m-    if (sz > 0) {[m
[31m-        --sz;[m
[31m-    }[m
[32m+[m[32m  if (sz_ > 0) {[m
[32m+[m[32m    --sz_;[m
[32m+[m[32m  }[m
 }[m
 [m
 void String::Resize(size_t new_sz) {[m
[31m-    if (new_sz > cap) {[m
[31m-        Reserve(new_sz);[m
[31m-    }[m
[31m-    sz = new_sz;[m
[32m+[m[32m  if (new_sz > cap_) {[m
[32m+[m[32m    Reserve(new_sz);[m
[32m+[m[32m  }[m
[32m+[m[32m  sz_ = new_sz;[m
 }[m
 [m
[31m-void String::Resize(size_t new_sz, char c) {[m
[31m-    size_t prev_sz = sz;[m
[31m-    Resize(new_sz);[m
[31m-    if (new_sz > prev_sz) {[m
[31m-        for (size_t i = prev_sz; i < new_sz; ++i) {[m
[31m-            data[i] = c;[m
[31m-        }[m
[32m+[m[32mvoid String::Resize(size_t new_sz, char chr) {[m
[32m+[m[32m  size_t prev_sz = sz_;[m
[32m+[m[32m  Resize(new_sz);[m
[32m+[m[32m  if (new_sz > prev_sz) {[m
[32m+[m[32m    for (size_t i = prev_sz; i < new_sz; ++i) {[m
[32m+[m[32m      data_[i] = chr;[m
     }[m
[32m+[m[32m  }[m
 }[m
 [m
 void String::Reserve(size_t new_cap) {[m
[31m-    if (new_cap > cap) {[m
[31m-        char* new_data = new char[new_cap];[m
[31m-        std::copy(data, data + sz, new_data);[m
[31m-        delete[] data;[m
[31m-        cap = new_cap;[m
[31m-        data = new_data;[m
[31m-    }[m
[32m+[m[32m  if (new_cap > cap_) {[m
[32m+[m[32m    char* new_data = new char[new_cap];[m
[32m+[m[32m    std::copy(data_, data_ + sz_, new_data);[m
[32m+[m[32m    delete[] data_;[m
[32m+[m[32m    cap_ = new_cap;[m
[32m+[m[32m    data_ = new_data;[m
[32m+[m[32m  }[m
 }[m
 [m
 void String::ShrinkToFit() {[m
[31m-    if (cap > sz) {[m
[31m-        char* new_data = new char[sz];[m
[31m-        std::copy(data, data + sz, new_data);[m
[31m-        delete[] data;[m
[31m-        cap = sz; [m
[31m-        data = new_data;[m
[31m-    }[m
[32m+[m[32m  if (cap_ > sz_) {[m
[32m+[m[32m    char* new_data = new char[sz_];[m
[32m+[m[32m    std::copy(data_, data_ + sz_, new_data);[m
[32m+[m[32m    delete[] data_;[m
[32m+[m[32m    cap_ = sz_;[m
[32m+[m[32m    data_ = new_data;[m
[32m+[m[32m  }[m
 }[m
 [m
[31m-void String::Swap(String& s) {[m
[31m-    std::swap(sz, s.sz);[m
[31m-    std::swap(cap, s.cap);[m
[31m-    std::swap(data, s.data);[m
[32m+[m[32mvoid String::Swap(String& str) {[m
[32m+[m[32m  std::swap(sz_, str.sz_);[m
[32m+[m[32m  std::swap(cap_, str.cap_);[m
[32m+[m[32m  std::swap(data_, str.data_);[m
 }[m
 [m
[31m-char& String::operator[](size_t idx) {[m
[31m-    return data[idx];[m
[31m-}[m
[32m+[m[32mchar& String::operator[](size_t idx) { return data_[idx]; }[m
 [m
[31m-const char& String::operator[](size_t idx) const{[m
[31m-    return data[idx];[m
[31m-}[m
[32m+[m[32mconst char& String::operator[](size_t idx) const { return data_[idx]; }[m
 [m
[31m-char& String::Front() {[m
[31m-  return data[0];[m
[31m-}[m
[31m-const char& String::Front() const {[m
[31m-  return data[0];[m
[31m-}[m
[32m+[m[32mchar& String::Front() { return data_[0]; }[m
[32m+[m[32mconst char& String::Front() const { return data_[0]; }[m
 [m
[31m-char& String::Back() {[m
[31m-  return data[sz - 1];[m
[31m-}[m
[31m-const char& String::Back() const {[m
[31m-  return data[sz - 1];[m
[31m-}[m
[32m+[m[32mchar& String::Back() { return data_[sz_ - 1]; }[m
[32m+[m[32mconst char& String::Back() const { return data_[sz_ - 1]; }[m
 [m
[31m-bool String::Empty() const {[m
[31m-    return (sz == 0);[m
[31m-}[m
[32m+[m[32mbool String::Empty() const { return (sz_ == 0); }[m
 [m
[31m-size_t String::Size() const {[m
[31m-    return sz;[m
[31m-}[m
[32m+[m[32msize_t String::Size() const { return sz_; }[m
 [m
[31m-size_t String::Capacity() const {[m
[31m-    return cap;[m
[31m-}[m
[32m+[m[32msize_t String::Capacity() const { return cap_; }[m
 [m
[31m-char* String::Data() {[m
[31m-    return data;[m
[31m-}[m
[31m-char const* String::Data() const {[m
[31m-    return data;[m
[31m-}[m
[32m+[m[32mchar* String::Data() { return data_; }[m
[32m+[m[32mchar const* String::Data() const { return data_; }[m
 [m
[31m-bool operator<(String const& s1, String const& s2) {[m
[31m-    size_t sz1 = s1.Size();[m
[31m-    size_t sz2 = s2.Size();[m
[31m-    for (int i1 = 0, i2 = 0; i1 < sz1 && i2 < sz2; ++i1, ++i2) {[m
[31m-        if (s1[i1] < s2[i2]) {[m
[31m-            return true;[m
[31m-        } else if (s1[i1] > s2[i2]) {[m
[31m-            return false;[m
[31m-        }[m
[32m+[m[32mbool operator<(String const& str1, String const& str2) {[m
[32m+[m[32m  size_t sz1 = str1.Size();[m
[32m+[m[32m  size_t sz2 = str2.Size();[m
[32m+[m[32m  for (int i1 = 0, i2 = 0; i1 < sz1 && i2 < sz2; ++i1, ++i2) {[m
[32m+[m[32m    if (str1[i1] < str2[i2]) {[m
[32m+[m[32m      return true;[m
     }[m
[31m-    return sz1 < sz2;[m
[31m-}[m
[31m-bool operator>(String const& s1, String const& s2) {[m
[31m-    return s2 < s1;[m
[32m+[m[32m    if (str1[i1] > str2[i2]) {[m
[32m+[m[32m      return false;[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
[32m+[m[32m  return sz1 < sz2;[m
 }[m
[31m-bool operator<=(String const& s1, String const& s2) {[m
[31m-    return !(s1 > s2);[m
[32m+[m[32mbool operator>(String const& str1, String const& str2) { return str2 < str1; }[m
[32m+[m[32mbool operator<=(String const& str1, String const& str2) {[m
[32m+[m[32m  return !(str1 > str2);[m
 }[m
[31m-bool operator>=(String const& s1, String const& s2) {[m
[31m-    return !(s1 < s2);[m
[32m+[m[32mbool operator>=(String const& str1, String const& str2) {[m
[32m+[m[32m  return !(str1 < str2);[m
 }[m
[31m-bool operator==(String const& s1, String const& s2) {[m
[31m-    size_t sz1 = s1.Size();[m
[31m-    size_t sz2 = s2.Size();[m
[31m-    for (int i1 = 0, i2 = 0; i1 < sz1 && i2 < sz2; ++i1, ++i2) {[m
[31m-        if (s1[i1] != s2[i2]) {[m
[31m-            return false;[m
[31m-        }[m
[32m+[m[32mbool operator==(String const& str1, String const& str2) {[m
[32m+[m[32m  size_t sz1 = str1.Size();[m
[32m+[m[32m  size_t sz2 = str2.Size();[m
[32m+[m[32m  for (int i1 = 0, i2 = 0; i1 < sz1 && i2 < sz2; ++i1, ++i2) {[m
[32m+[m[32m    if (str1[i1] != str2[i2]) {[m
[32m+[m[32m      return false;[m
     }[m
[31m-    return sz1 != sz2;[m
[32m+[m[32m  }[m
[32m+[m[32m  return sz1 != sz2;[m
 }[m
[31m-bool operator!=(String const& s1, String const& s2) {[m
[31m-    return !(s1 == s2);[m
[32m+[m[32mbool operator!=(String const& str1, String const& str2) {[m
[32m+[m[32m  return !(str1 == str2);[m
 }[m
 [m
[31m-String& String::operator+=(String const& s) {[m
[31m-    size_t new_sz = sz + s.Size();[m
[31m-    if (new_sz > cap) {[m
[31m-        Reserve(new_sz * 2);[m
[31m-    }[m
[31m-    for (int i = sz; i < new_sz; ++i) {[m
[31m-        data[i] = s[i];[m
[31m-    }[m
[31m-    sz = new_sz;[m
[31m-    return *this;[m
[32m+[m[32mString& String::operator+=(String const& str) {[m
[32m+[m[32m  size_t new_sz = sz_ + str.Size();[m
[32m+[m[32m  if (new_sz > cap_) {[m
[32m+[m[32m    Reserve(new_sz * 2);[m
[32m+[m[32m  }[m
[32m+[m[32m  for (int i = sz_; i < new_sz; ++i) {[m
[32m+[m[32m    data_[i] = str[i];[m
[32m+[m[32m  }[m
[32m+[m[32m  sz_ = new_sz;[m
[32m+[m[32m  return *this;[m
 }[m
 [m
[31m-String operator+(String const& s1, String const& s2) {[m
[31m-    String copy = s1;[m
[31m-    copy += s2;[m
[31m-    return copy;[m
[32m+[m[32mString operator+(String const& str1, String const& str2) {[m
[32m+[m[32m  String copy = str1;[m
[32m+[m[32m  copy += str2;[m
[32m+[m[32m  return copy;[m
 }[m
 [m
[31m-String& String::operator*=(size_t n) {[m
[31m-    Reserve(n * sz);[m
[31m-    for (size_t i = 1; i < n; ++i) {[m
[31m-        std::copy(data, data + sz, data + i * sz);[m
[31m-    }[m
[31m-    sz *= n;[m
[31m-    return *this;[m
[31m-    [m
[32m+[m[32mString& String::operator*=(size_t num) {[m
[32m+[m[32m  Reserve(num * sz_);[m
[32m+[m[32m  for (size_t i = 1; i < num; ++i) {[m
[32m+[m[32m    std::copy(data_, data_ + sz_, data_ + i * sz_);[m
[32m+[m[32m  }[m
[32m+[m[32m  sz_ *= num;[m
[32m+[m[32m  return *this;[m
 }[m
 [m
[31m-std::ostream& operator<<(std::ostream& out, String const& s) {[m
[31m-    size_t sz = s.Size();[m
[31m-    for (size_t i = 0; i < sz; ++i) {[m
[31m-        out << s;[m
[31m-    }[m
[31m-    return out;[m
[32m+[m[32mstd::ostream& operator<<(std::ostream& out, String const& str) {[m
[32m+[m[32m  size_t size = str.Size();[m
[32m+[m[32m  for (size_t i = 0; i < size; ++i) {[m
[32m+[m[32m    out << str[i];[m
[32m+[m[32m  }[m
[32m+[m[32m  return out;[m
 }[m
 [m
[31m-std::istream& operator>>(std::istream& in, String& s) {[m
[31m-    std::istream::sentry snt(in); [m
[31m-    if (snt) {[m
[31m-        s.Clear();[m
[31m-[m
[31m-        std::streamsize n = in.width();[m
[31m-        if (n == 0) n = std::numeric_limits<std::streamsize>::max() ;[m
[31m-[m
[31m-        char c;[m
[31m-        while (in.get(c)) [m
[31m-        {[m
[31m-            s.PushBack(c);[m
[32m+[m[32mstd::istream& operator>>(std::istream& inp, String& str) {[m
[32m+[m[32m  std::istream::sentry snt(inp);[m
[32m+[m[32m  if (snt) {[m
[32m+[m[32m    str.Clear();[m
 [m
[31m-            if (--n == 0) break;[m
[31m-            if (in.peek() == std::istream::traits_type::eof()) break; [m
[31m-            if (std::isspace(in.peek(), in.getloc())) break; [m
[31m-        }[m
[32m+[m[32m    std::streamsize wth = inp.width();[m
[32m+[m[32m    if (wth == 0) {[m
[32m+[m[32m      wth = std::numeric_limits<std::streamsize>::max();[m
     }[m
[32m+[m[32m    char chr;[m
[32m+[m[32m    while (inp.get(chr)) {[m
[32m+[m[32m      str.PushBack(chr);[m
[32m+[m
[32m+[m[32m      --wth;[m
[32m+[m[32m      bool space = std::isspace(inp.peek(), inp.getloc());[m
[32m+[m[32m      if (wth == 0 || inp.peek() == EOF || space) {[m
[32m+[m[32m        break;[m
[32m+[m[32m      }[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
 [m
[31m-    in.width(0); [m
[31m-    return in;  [m
[32m+[m[32m  inp.width(0);[m
[32m+[m[32m  return inp;[m
 }[m
 [m
 std::vector<String> String::Split(String const& delim) const {[m
[31m-    size_t pos_start = 0, pos_end, delim_len = delim.Size();[m
[31m-    String token;[m
[31m-    std::vector<String> tmp;[m
[31m-[m
[31m-    while ((pos_end = (*this).Find(delim, pos_start)) != std::string::npos) {[m
[31m-        token = (*this).Substr(pos_start, pos_end - pos_start);[m
[31m-        pos_start = pos_end + delim_len;[m
[31m-        tmp.push_back(token);[m
[31m-    }[m
[32m+[m[32m  size_t pos_start = 0;[m
[32m+[m[32m  size_t pos_end;[m
[32m+[m
[32m+[m[32m  size_t delim_len = delim.Size();[m
 [m
[31m-    tmp.push_back((*this).Substr(pos_start));[m
[31m-    return tmp;[m
[32m+[m[32m  String token;[m
[32m+[m[32m  std::vector<String> tmp;[m
[32m+[m
[32m+[m[32m  while ((pos_end = (*this).Find(delim, pos_start)) != String::kNpos) {[m
[32m+[m[32m    token = (*this).Substr(pos_start, pos_end - pos_start);[m
[32m+[m[32m    pos_start = pos_end + delim_len;[m
[32m+[m[32m    tmp.push_back(token);[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  tmp.push_back((*this).Substr(pos_start));[m
[32m+[m[32m  return tmp;[m
 }[m
[31m-    [m
[31m-String String::Join(const std::vector<String>& strings) const {[m
[31m-    size_t n = strings.size();[m
[31m-    if (n == 0) return String("");[m
[31m-    size_t len = 0;[m
[31m-    for (size_t i = 0; i < n; ++i) {[m
[31m-        len += strings[i].Size();[m
[31m-    }[m
[31m-    String tmp;[m
[31m-    tmp.Reserve(len + (n - 1) * sz);[m
[31m-    for (size_t i = 0; i < n; ++i) {[m
[31m-        tmp += strings[i];[m
[31m-        if (i != n - 1) {[m
[31m-            tmp += *this;[m
[31m-        }[m
[32m+[m
[32m+[m[32mString String::Join(std::vector<String> const& strings) const {[m
[32m+[m[32m  size_t v_size = strings.size();[m
[32m+[m[32m  if (v_size == 0) {[m
[32m+[m[32m    return String("");[m
[32m+[m[32m  }[m
[32m+[m[32m  size_t amount_len = 0;[m
[32m+[m[32m  for (size_t i = 0; i < v_size; ++i) {[m
[32m+[m[32m    amount_len += strings[i].Size();[m
[32m+[m[32m  }[m
[32m+[m[32m  String tmp;[m
[32m+[m[32m  tmp.Reserve(amount_len + (v_size - 1) * sz_);[m
[32m+[m[32m  for (size_t i = 0; i < v_size; ++i) {[m
[32m+[m[32m    tmp += strings[i];[m
[32m+[m[32m    if (i != v_size - 1) {[m
[32m+[m[32m      tmp += *this;[m
     }[m
[31m-    return tmp;[m
[32m+[m[32m  }[m
[32m+[m[32m  return tmp;[m
 }[m
 [m
[31m-size_t String::Find(const String& s, size_t pos) const {[m
[32m+[m[32msize_t String::Find(String const& str, size_t pos) const {[m
[32m+[m[32m  size_t str_sz = str.Size();[m
   size_t start;[m
[31m-  size_t j;[m
[31m-  for (size_t i = pos; i < sz - 1; ++i) {[m
[32m+[m[32m  size_t match;[m
[32m+[m[32m  for (size_t i = pos; i < sz_ - 1; ++i) {[m
     start = i;[m
[31m-    j = 0;[m
[31m-      for (; j < s.Size() && (i + j) < sz - 1; ++j) {[m
[31m-        if (data[i + j] != s[j]) break;[m
[32m+[m[32m    match = 0;[m
[32m+[m[32m    for (; match < str_sz && (i + match) < sz_ - 1; ++match) {[m
[32m+[m[32m      if (data_[i + match] != str[match]) {[m
[32m+[m[32m        break;[m
       }[m
[31m-      if (j == s.Size()) return start;[m
[32m+[m[32m    }[m
[32m+[m[32m    if (match == str_sz) {[m
[32m+[m[32m      return start;[m
[32m+[m[32m    }[m
   }[m
[31m-  return (s.Size() ? std::string::npos : 0);[m
[32m+[m[32m  return (str_sz != 0 ? String::kNpos : 0);[m
 }[m
 [m
 String String::Substr(size_t pos, size_t count) const {[m
[31m-  if (count > sz - 1 - pos) return String(data + pos);[m
[31m-  char c = data[pos + count];[m
[31m-  data[pos + count] = '\0';[m
[31m-  String copy(data + pos);[m
[31m-  data[pos + count] = c;[m
[32m+[m[32m  if (count > sz_ - 1 - pos) {[m
[32m+[m[32m    return String(data_ + pos);[m
[32m+[m[32m  }[m
[32m+[m[32m  char chr = data_[pos + count];[m
[32m+[m[32m  data_[pos + count] = '\0';[m
[32m+[m[32m  String copy(data_ + pos);[m
[32m+[m[32m  data_[pos + count] = chr;[m
   return copy;[m
 }[m
[31m-[m
[1mdiff --git a/string/string.hpp b/string/string.hpp[m
[1mindex f7576de..b0b61a1 100644[m
[1m--- a/string/string.hpp[m
[1m+++ b/string/string.hpp[m
[36m@@ -1,81 +1,84 @@[m
[31m-#include <cstring>[m
[31m-#include <locale>[m
[31m-#include <limits>[m
[32m+[m[32m#pragma once[m
[32m+[m[32m// Copyright 2023 Vladislav Pakhomov[m
[32m+[m
 #include <istream>[m
[32m+[m[32m#include <limits>[m
 #include <vector>[m
[31m-#include <iostream>[m
 [m
 class String {[m
[31m-private:[m
[31m-    size_t sz = 0;[m
[31m-    size_t cap = 0;[m
[31m-    char* data = nullptr;[m
[31m-public:[m
[31m-    String() = default; [m
[32m+[m[32m public:[m
[32m+[m[32m  static size_t const kNpos = std::numeric_limits<size_t>::max();[m
[32m+[m
[32m+[m[32m  String() = default;[m
[32m+[m
[32m+[m[32m  String(size_t num, char chr);[m
[32m+[m
[32m+[m[32m  explicit String(char const* str);[m
[32m+[m
[32m+[m[32m  String(String const& str);[m
[32m+[m[32m  String& operator=(String const& str);[m
[32m+[m[32m  ~String();[m
 [m
[31m-    String(size_t n, char c);[m
[32m+[m[32m  void Clear();[m
 [m
[31m-    String(char const* new_data);[m
[32m+[m[32m  void PushBack(char chr);[m
 [m
[31m-	String(String const& s);[m
[31m-	String& operator=(String const& s);[m
[31m-    ~String();[m
[32m+[m[32m  void PopBack();[m
 [m
[31m-    void Clear();[m
[32m+[m[32m  void Resize(size_t new_sz);[m
 [m
[31m-    void PushBack(char c);[m
[32m+[m[32m  void Resize(size_t new_sz, char chr);[m
 [m
[31m-    void PopBack();[m
[32m+[m[32m  void Reserve(size_t new_cap);[m
 [m
[31m-    void Resize(size_t new_sz);[m
[32m+[m[32m  void ShrinkToFit();[m
 [m
[31m-    void Resize(size_t new_sz, char c);[m
[32m+[m[32m  void Swap(String& str);[m
 [m
[31m-    void Reserve(size_t new_cap);[m
[32m+[m[32m  char& operator[](size_t idx);[m
[32m+[m[32m  char const& operator[](size_t idx) const;[m
 [m
[31m-    void ShrinkToFit();[m
[31m-    [m
[31m-    void Swap(String& s);[m
[32m+[m[32m  char& Front();[m
[32m+[m[32m  char const& Front() const;[m
 [m
[31m-    char& operator[](size_t idx);[m
[31m-    char const& operator[](size_t idx) const;[m
[32m+[m[32m  char& Back();[m
[32m+[m[32m  char const& Back() const;[m
 [m
[31m-    char& Front();[m
[31m-    char const& Front() const;[m
[32m+[m[32m  bool Empty() const;[m
 [m
[31m-    char& Back();[m
[31m-    char const& Back() const;[m
[32m+[m[32m  size_t Size() const;[m
 [m
[31m-    bool Empty() const;[m
[32m+[m[32m  size_t Capacity() const;[m
 [m
[31m-    size_t Size() const;[m
[32m+[m[32m  char* Data();[m
[32m+[m[32m  char const* Data() const;[m
 [m
[31m-    size_t Capacity() const;[m
[32m+[m[32m  String& operator+=(String const& str);[m
 [m
[31m-    char* Data();[m
[31m-    char const* Data() const;[m
[32m+[m[32m  String& operator*=(size_t num);[m
 [m
[31m-    String& operator+=(String const& s);[m
[32m+[m[32m  std::vector<String> Split(String const& delim = String(" ")) const;[m
 [m
[31m-    String& operator*=(size_t n); [m
[32m+[m[32m  String Join(std::vector<String> const& strings) const;[m
 [m
[31m-    std::vector<String> Split(const String& delim = " ") const;[m
[31m-    [m
[31m-    String Join(const std::vector<String>& strings) const;[m
[32m+[m[32m  size_t Find(String const& str, size_t pos = 0) const;[m
 [m
[31m-    size_t Find(String const& s, size_t pos = 0) const;[m
[32m+[m[32m  String Substr(size_t pos, size_t count = String::kNpos) const;[m
 [m
[31m-    String String::Substr(size_t pos, size_t count = std::string::npos) const;[m
[32m+[m[32m private:[m
[32m+[m[32m  size_t sz_ = 0;[m
[32m+[m[32m  size_t cap_ = 0;[m
[32m+[m[32m  char* data_ = nullptr;[m
 };[m
 [m
[31m-bool operator<(String const& s1, String const& s2);[m
[31m-bool operator>(String const& s1, String const& s2);[m
[31m-bool operator<=(String const& s1, String const& s2);[m
[31m-bool operator>=(String const& s1, String const& s2);[m
[31m-bool operator==(String const& s1, String const& s2);[m
[31m-bool operator!=(String const& s1, String const& s2);[m
[32m+[m[32mbool operator<(String const& str1, String const& str2);[m
[32m+[m[32mbool operator>(String const& str1, String const& str2);[m
[32m+[m[32mbool operator<=(String const& str1, String const& str2);[m
[32m+[m[32mbool operator>=(String const& str1, String const& str2);[m
[32m+[m[32mbool operator==(String const& str1, String const& str2);[m
[32m+[m[32mbool operator!=(String const& str1, String const& str2);[m
 [m
[31m-String operator+(String const& s1, String const& s2);[m
[32m+[m[32mString operator+(String const& str1, String const& str2);[m
 [m
[31m-std::ostream& operator<<(std::ostream& out, String const& s);[m
[31m-std::istream& operator>>(std::istream& in, String& s);[m
[32m+[m[32mstd::ostream& operator<<(std::ostream& out, String const& str);[m
[32m+[m[32mstd::istream& operator>>(std::istream& inp, String& str);[m
